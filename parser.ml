type token =
  | IDENT of (string)
  | INTEGER of (int32)
  | STRING of (string)
  | FOR
  | IF
  | ELSE
  | WHILE
  | RETURN
  | SIZEOF
  | VOID
  | INT
  | CHAR
  | STRUCT
  | UNION
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | SEMICOLON
  | COMMA
  | DOT
  | ARROW
  | EOF
  | EQ
  | OR
  | AND
  | EQOP of (Ast.binop)
  | COMP of (Ast.binop)
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | PLUSPLUS
  | MINUSMINUS
  | BANG
  | AMPERSAND

open Parsing;;
# 4 "parser.mly"
  open Ast

  (* déclarateurs:
     représentation intermédiaire permettant de convertire par ex:
     int x, **y, z[10];
     en (int, x); (int**, y), (int[10], z)
  *)

  let mk_loc e l = { loc = l; node = e }

  let loc e =
    mk_loc e (Parsing.symbol_start_pos (),Parsing.symbol_end_pos())

  let loc_i i e =
    mk_loc e (Parsing.rhs_start_pos i, Parsing.rhs_end_pos i)

  let loc_dummy e =
    mk_loc e (Lexing.dummy_pos, Lexing.dummy_pos)


  type declarator =
    | Dident of ident
    | Dpointer of declarator

  let rec declarator ty = function
    | Dident id -> ty, id
    | Dpointer d -> declarator (Tpointer ty) d

# 73 "parser.ml"
let yytransl_const = [|
  260 (* FOR *);
  261 (* IF *);
  262 (* ELSE *);
  263 (* WHILE *);
  264 (* RETURN *);
  265 (* SIZEOF *);
  266 (* VOID *);
  267 (* INT *);
  268 (* CHAR *);
  269 (* STRUCT *);
  270 (* UNION *);
  271 (* LPAR *);
  272 (* RPAR *);
  273 (* LBRACE *);
  274 (* RBRACE *);
  275 (* LSQUARE *);
  276 (* RSQUARE *);
  277 (* SEMICOLON *);
  278 (* COMMA *);
  279 (* DOT *);
  280 (* ARROW *);
    0 (* EOF *);
  281 (* EQ *);
  282 (* OR *);
  283 (* AND *);
  286 (* PLUS *);
  287 (* MINUS *);
  288 (* STAR *);
  289 (* SLASH *);
  290 (* PERCENT *);
  291 (* PLUSPLUS *);
  292 (* MINUSMINUS *);
  293 (* BANG *);
  294 (* AMPERSAND *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* INTEGER *);
  259 (* STRING *);
  284 (* EQOP *);
  285 (* COMP *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\007\000\
\006\000\006\000\004\000\008\000\008\000\013\000\013\000\010\000\
\010\000\010\000\010\000\010\000\014\000\014\000\012\000\012\000\
\011\000\011\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\018\000\
\018\000\016\000\016\000\019\000\019\000\020\000\020\000\009\000\
\005\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\006\000\005\000\002\000\
\000\000\002\000\003\000\000\000\001\000\002\000\004\000\001\000\
\001\000\001\000\002\000\002\000\001\000\002\000\001\000\003\000\
\001\000\002\000\003\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\002\000\002\000\002\000\002\000\001\000\001\000\004\000\
\001\000\002\000\004\000\003\000\003\000\003\000\001\000\002\000\
\005\000\007\000\009\000\005\000\001\000\002\000\003\000\000\000\
\001\000\000\000\001\000\001\000\003\000\000\000\002\000\004\000\
\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\074\000\000\000\016\000\017\000\018\000\000\000\
\000\000\001\000\003\000\004\000\000\000\000\000\073\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\026\000\000\000\011\000\
\000\000\000\000\000\000\000\000\019\000\020\000\000\000\000\000\
\000\000\024\000\010\000\000\000\000\000\000\000\007\000\000\000\
\005\000\006\000\000\000\015\000\046\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\031\000\
\071\000\072\000\000\000\000\000\067\000\000\000\000\000\063\000\
\021\000\000\000\054\000\000\000\000\000\052\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\022\000\048\000\
\051\000\069\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\058\000\000\000\059\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\033\000\069\000\034\000\013\000\027\000\
\070\000\035\000\041\000\022\000\029\000\114\000\071\000\108\000\
\072\000\140\000\109\000\073\000"

let yysindex = "\020\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\022\255\
\022\255\000\000\000\000\000\000\017\255\002\255\000\000\012\255\
\032\255\185\255\002\255\000\000\028\255\033\255\185\255\185\255\
\022\255\022\255\040\255\002\255\000\000\000\000\002\255\000\000\
\185\255\039\255\002\255\041\255\000\000\000\000\043\255\047\255\
\028\255\000\000\000\000\059\255\066\255\185\255\000\000\185\255\
\000\000\000\000\155\255\000\000\000\000\000\000\046\255\073\255\
\075\255\179\255\079\255\203\255\000\000\203\255\203\255\203\255\
\203\255\203\255\203\255\203\255\081\255\000\000\252\000\155\255\
\080\255\203\255\203\255\203\255\000\000\014\001\185\255\002\000\
\078\255\078\255\078\255\078\255\078\255\078\255\078\255\203\255\
\203\255\000\000\022\255\022\255\203\255\203\255\203\255\203\255\
\203\255\203\255\203\255\203\255\203\255\203\255\000\000\000\000\
\000\000\000\000\032\001\072\255\000\000\023\000\044\000\000\000\
\000\000\252\254\000\000\083\255\050\001\000\000\000\000\068\001\
\086\001\104\001\122\001\140\001\158\001\158\001\078\255\078\255\
\078\255\203\255\203\255\155\255\155\255\000\000\000\000\000\000\
\000\000\000\000\068\001\082\255\094\255\000\000\203\255\155\255\
\091\255\000\000\155\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\255\
\014\255\092\255\000\000\000\000\005\255\000\000\097\255\097\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\255\000\000\000\000\000\000\000\000\000\000\000\000\100\255\
\096\255\000\000\000\000\000\000\000\000\074\255\000\000\000\000\
\000\000\000\000\115\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\226\255\000\000\000\000\115\255\
\000\000\116\255\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\084\000\103\000\122\000\141\000\160\000\179\000\123\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\255\
\120\255\225\001\204\255\211\001\179\001\195\001\198\000\217\000\
\236\000\000\000\122\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\255\000\000\117\255\000\000\123\255\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\140\000\039\000\038\000\000\000\000\000\
\112\000\007\000\005\000\130\000\117\000\000\000\198\255\181\255\
\175\255\000\000\036\000\095\000"

let yytablesize = 764
let yytable = "\078\000\
\010\000\080\000\015\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\014\000\134\000\116\000\019\000\020\000\107\000\
\110\000\111\000\021\000\008\000\001\000\068\000\015\000\030\000\
\028\000\023\000\068\000\135\000\023\000\107\000\117\000\018\000\
\040\000\019\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\127\000\128\000\129\000\019\000\020\000\016\000\017\000\
\024\000\031\000\141\000\142\000\020\000\032\000\028\000\039\000\
\044\000\020\000\045\000\046\000\074\000\036\000\146\000\037\000\
\038\000\148\000\020\000\145\000\048\000\020\000\043\000\107\000\
\139\000\020\000\009\000\009\000\009\000\009\000\009\000\049\000\
\009\000\009\000\009\000\051\000\107\000\113\000\050\000\075\000\
\009\000\076\000\009\000\009\000\131\000\079\000\009\000\088\000\
\089\000\106\000\136\000\144\000\091\000\092\000\143\000\009\000\
\009\000\009\000\147\000\012\000\009\000\009\000\009\000\009\000\
\103\000\104\000\009\000\014\000\023\000\057\000\057\000\057\000\
\057\000\057\000\027\000\057\000\057\000\057\000\027\000\027\000\
\027\000\118\000\119\000\057\000\070\000\057\000\057\000\032\000\
\066\000\057\000\066\000\032\000\032\000\032\000\064\000\012\000\
\032\000\032\000\057\000\057\000\057\000\065\000\047\000\057\000\
\057\000\057\000\057\000\015\000\053\000\054\000\055\000\056\000\
\042\000\057\000\058\000\059\000\052\000\138\000\105\000\000\000\
\000\000\060\000\000\000\046\000\000\000\000\000\000\000\061\000\
\000\000\000\000\000\000\015\000\053\000\054\000\000\000\000\000\
\062\000\063\000\064\000\059\000\000\000\065\000\066\000\067\000\
\068\000\060\000\005\000\006\000\007\000\025\000\026\000\077\000\
\000\000\000\000\000\000\015\000\053\000\054\000\000\000\000\000\
\062\000\063\000\064\000\059\000\000\000\065\000\066\000\067\000\
\068\000\060\000\000\000\034\000\000\000\000\000\000\000\034\000\
\034\000\034\000\000\000\000\000\034\000\034\000\034\000\034\000\
\062\000\063\000\064\000\000\000\000\000\065\000\066\000\067\000\
\068\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\000\000\000\000\005\000\006\000\007\000\008\000\009\000\000\000\
\000\000\115\000\000\000\000\000\089\000\000\000\000\000\000\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\132\000\000\000\
\000\000\089\000\000\000\000\000\000\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\133\000\000\000\000\000\089\000\000\000\
\000\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\042\000\000\000\000\000\000\000\042\000\042\000\042\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\043\000\000\000\000\000\000\000\043\000\
\043\000\043\000\000\000\000\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\050\000\000\000\
\000\000\000\000\050\000\050\000\050\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\029\000\000\000\000\000\000\000\029\000\029\000\029\000\
\000\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\028\000\000\000\000\000\000\000\
\028\000\028\000\028\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\044\000\
\000\000\000\000\000\000\044\000\044\000\044\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\045\000\000\000\000\000\000\000\045\000\045\000\
\045\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\038\000\000\000\000\000\
\000\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\039\000\000\000\000\000\000\000\039\000\039\000\039\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\040\000\000\000\000\000\000\000\040\000\
\040\000\040\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\089\000\000\000\
\090\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\089\000\000\000\112\000\000\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\089\000\000\000\000\000\130\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\089\000\137\000\000\000\000\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\089\000\000\000\
\000\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\089\000\000\000\000\000\000\000\091\000\092\000\000\000\000\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\089\000\000\000\000\000\000\000\091\000\092\000\
\000\000\000\000\000\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\089\000\000\000\000\000\000\000\
\091\000\092\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\089\000\000\000\
\000\000\000\000\091\000\092\000\000\000\000\000\000\000\000\000\
\000\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\089\000\000\000\000\000\000\000\091\000\092\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\100\000\101\000\102\000\
\103\000\104\000\036\000\000\000\000\000\000\000\036\000\036\000\
\036\000\000\000\000\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\037\000\000\000\000\000\000\000\037\000\037\000\
\037\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\035\000\000\000\000\000\000\000\035\000\035\000\
\035\000\000\000\000\000\035\000\035\000\035\000\035\000\035\000\
\033\000\000\000\000\000\000\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\033\000"

let yycheck = "\058\000\
\000\000\060\000\001\001\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\004\000\016\001\088\000\001\001\001\001\074\000\
\075\000\076\000\014\000\015\001\001\000\016\001\001\001\019\000\
\018\000\021\001\021\001\032\001\017\001\088\000\089\000\015\001\
\028\000\032\001\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\032\001\032\001\008\000\009\000\
\017\001\022\001\132\000\133\000\014\000\021\001\048\000\016\001\
\018\001\019\000\018\001\017\001\015\001\024\000\144\000\025\000\
\026\000\147\000\028\000\143\000\022\001\031\000\033\000\130\000\
\131\000\035\000\001\001\002\001\003\001\004\001\005\001\021\001\
\007\001\008\001\009\001\046\000\143\000\079\000\021\001\015\001\
\015\001\015\001\017\001\018\001\021\001\015\001\021\001\015\001\
\019\001\018\001\016\001\006\001\023\001\024\001\021\001\030\001\
\031\001\032\001\016\001\016\001\035\001\036\001\037\001\038\001\
\035\001\036\001\018\001\016\001\021\001\001\001\002\001\003\001\
\004\001\005\001\016\001\007\001\008\001\009\001\020\001\021\001\
\022\001\091\000\092\000\015\001\018\001\017\001\018\001\016\001\
\021\001\021\001\016\001\020\001\021\001\022\001\021\001\004\000\
\025\001\026\001\030\001\031\001\032\001\021\001\039\000\035\001\
\036\001\037\001\038\001\001\001\002\001\003\001\004\001\005\001\
\031\000\007\001\008\001\009\001\048\000\130\000\072\000\255\255\
\255\255\015\001\255\255\017\001\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\001\001\002\001\003\001\255\255\255\255\
\030\001\031\001\032\001\009\001\255\255\035\001\036\001\037\001\
\038\001\015\001\010\001\011\001\012\001\013\001\014\001\021\001\
\255\255\255\255\255\255\001\001\002\001\003\001\255\255\255\255\
\030\001\031\001\032\001\009\001\255\255\035\001\036\001\037\001\
\038\001\015\001\255\255\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\030\001\031\001\032\001\255\255\255\255\035\001\036\001\037\001\
\038\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\016\001\255\255\255\255\019\001\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\016\001\255\255\
\255\255\019\001\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\016\001\255\255\255\255\019\001\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\016\001\255\255\255\255\255\255\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\016\001\255\255\255\255\255\255\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\016\001\
\255\255\255\255\255\255\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\016\001\255\255\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\019\001\255\255\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\019\001\255\255\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\019\001\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\019\001\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\019\001\255\255\255\255\255\255\023\001\024\001\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\019\001\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\019\001\255\255\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\019\001\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\016\001\255\255\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\016\001\255\255\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\016\001\255\255\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001"

let yynames_const = "\
  FOR\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  RETURN\000\
  SIZEOF\000\
  VOID\000\
  INT\000\
  CHAR\000\
  STRUCT\000\
  UNION\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  SEMICOLON\000\
  COMMA\000\
  DOT\000\
  ARROW\000\
  EOF\000\
  EQ\000\
  OR\000\
  AND\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  BANG\000\
  AMPERSAND\000\
  "

let yynames_block = "\
  IDENT\000\
  INTEGER\000\
  STRING\000\
  EQOP\000\
  COMP\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_star) in
    Obj.repr(
# 85 "parser.mly"
    ( List.rev _1 )
# 465 "parser.ml"
               : Ast.loc Ast.file))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( [] )
# 471 "parser.ml"
               : 'decl_star))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_star) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 92 "parser.mly"
                 ( _2 :: _1 )
# 479 "parser.ml"
               : 'decl_star))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_vars) in
    Obj.repr(
# 97 "parser.mly"
    ( Dvars _1 )
# 486 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'decl_vars_star) in
    Obj.repr(
# 99 "parser.mly"
    ( Dstruct (_2, _4) )
# 494 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'decl_vars_star) in
    Obj.repr(
# 101 "parser.mly"
    ( Dunion (_2, _4) )
# 502 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'c_type_fun) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'parameters_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 103 "parser.mly"
    ( let ty, id = _1 in Dfun (ty, id, _3, _5) )
# 511 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'c_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 107 "parser.mly"
             ( declarator _1 _2 )
# 519 "parser.ml"
               : 'c_type_fun))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                ( [] )
# 525 "parser.ml"
               : 'decl_vars_star))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_vars) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_vars_star) in
    Obj.repr(
# 113 "parser.mly"
                           ( _1 @ _2 )
# 533 "parser.ml"
               : 'decl_vars_star))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'c_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    Obj.repr(
# 117 "parser.mly"
                        ( List.map (fun d -> (declarator _1 d)) _2 )
# 541 "parser.ml"
               : 'decl_vars))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                ( [] )
# 547 "parser.ml"
               : 'parameters_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 122 "parser.mly"
                ( _1 )
# 554 "parser.ml"
               : 'parameters_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'c_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 126 "parser.mly"
             ( [declarator _1 _2] )
# 562 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'c_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 127 "parser.mly"
                              ( declarator _1 _2 :: _4 )
# 571 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
       ( Tvoid )
# 577 "parser.ml"
               : 'c_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
      ( Tint )
# 583 "parser.ml"
               : 'c_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
       ( Tchar )
# 589 "parser.ml"
               : 'c_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 134 "parser.mly"
               ( Tstruct _2 )
# 596 "parser.ml"
               : 'c_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 135 "parser.mly"
               ( Tstruct _2 )
# 603 "parser.ml"
               : 'c_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'c_type) in
    Obj.repr(
# 138 "parser.mly"
          ( _1 )
# 610 "parser.ml"
               : 'cplx_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cplx_type) in
    Obj.repr(
# 139 "parser.mly"
                  ( Tpointer(_1) )
# 617 "parser.ml"
               : 'cplx_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 143 "parser.mly"
      ( [_1] )
# 624 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 144 "parser.mly"
                 ( _1 :: _3 )
# 632 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 149 "parser.mly"
    ( Dident _1 )
# 639 "parser.ml"
               : 'var))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 151 "parser.mly"
    ( Dpointer _2 )
# 646 "parser.ml"
               : 'var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
    ( loc (Eassign (_1, _3)) )
# 654 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
    ( loc (Eunop (Upre_dec, _2)) )
# 661 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
    ( loc (Eunop (Upre_inc, _2)) )
# 668 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
    ( loc (Eunop (Upost_inc, _1)) )
# 675 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
    ( loc (Eunop (Upost_dec, _1)) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
    ( loc (Ebinop (Bor, _1, _3)) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
    ( loc (Ebinop (Band, _1, _3)) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.binop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
    ( loc (Ebinop (_2, _1, _3)) )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.binop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
    ( loc (Ebinop (_2, _1, _3)) )
# 716 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
    ( loc (Ebinop (Badd, _1, _3)) )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
    ( loc (Ebinop (Bsub, _1, _3)) )
# 732 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
    ( loc (Ebinop (Bmul, _1, _3)) )
# 740 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
    ( loc (Ebinop (Bdiv, _1, _3)) )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
    ( loc (Ebinop (Bmod, _1, _3)) )
# 756 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'cplx_type) in
    Obj.repr(
# 185 "parser.mly"
    ( loc (Esizeof (_3)) )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
    ( loc (Eunop (Uplus, _2)) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
    ( loc (Eunop (Uminus, _2)) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
    ( loc (Eunop (Unot, _2)) )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
    ( loc (Eunop (Uamp, _2)) )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int32) in
    Obj.repr(
# 195 "parser.mly"
    ( if _1 = 0l then loc Enull else loc (Econst (Cint _1)) )
# 798 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 197 "parser.mly"
    ( loc (Econst (Cstring _1)) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_expr_opt) in
    Obj.repr(
# 199 "parser.mly"
    ( loc (Ecall (_1, _3)) )
# 813 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 201 "parser.mly"
    ( loc (Eident _1) )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
    ( loc (Eunop (Ustar, _2)) )
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
    ( 
      let sum = loc (Ebinop(Badd, _1, _3)) in
	loc (Eunop(Ustar,sum))
    )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 210 "parser.mly"
    ( loc (Edot (_1, _3)) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 213 "parser.mly"
    (
      let star = loc (Eunop(Ustar, _1)) in
      loc (Edot (star, _3))
    )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 218 "parser.mly"
    ( _2 )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "parser.mly"
   ( loc Sskip )
# 870 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 225 "parser.mly"
   ( loc (Sexpr _1) )
# 877 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 227 "parser.mly"
   ( loc (Sif (_3, _5, loc_dummy Sskip)) )
# 885 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 229 "parser.mly"
   ( loc (Sif (_3, _5, _7)) )
# 894 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'l_expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_or_1) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'l_expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 231 "parser.mly"
   ( let l_expr i = List.map (fun e -> loc_i i (Sexpr e)) in
     loc (Sfor (l_expr 3 _3, _5, l_expr 7 _7, _9)) )
# 905 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 234 "parser.mly"
   ( loc (Swhile (_3, _5)) )
# 913 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 236 "parser.mly"
   ( loc (Sblock _1) )
# 920 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "parser.mly"
   ( loc (Sreturn None) )
# 926 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 240 "parser.mly"
   ( loc (Sreturn (Some _2)) )
# 933 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "parser.mly"
                (  loc (Econst (Cint 1l)) )
# 939 "parser.ml"
               : 'expr_or_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 245 "parser.mly"
       ( _1 )
# 946 "parser.ml"
               : 'expr_or_1))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "parser.mly"
                ( [] )
# 952 "parser.ml"
               : 'l_expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'l_expr) in
    Obj.repr(
# 250 "parser.mly"
                ( _1 )
# 959 "parser.ml"
               : 'l_expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 254 "parser.mly"
       ( [_1] )
# 966 "parser.ml"
               : 'l_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_expr) in
    Obj.repr(
# 255 "parser.mly"
                    ( _1 :: _3 )
# 974 "parser.ml"
               : 'l_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "parser.mly"
                ( [] )
# 980 "parser.ml"
               : 'statement_star))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement_star) in
    Obj.repr(
# 260 "parser.mly"
                           ( _1 :: _2 )
# 988 "parser.ml"
               : 'statement_star))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decl_vars_star) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement_star) in
    Obj.repr(
# 264 "parser.mly"
                                              ( _2, _3 )
# 996 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 270 "parser.mly"
        ( loc _1 )
# 1003 "parser.ml"
               : 'ident))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.loc Ast.file)
